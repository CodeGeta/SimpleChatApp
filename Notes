Course : Become a NodeJS Path Linkedin
Akshay#Katira@123

Section : Learning NodeJS
	Module : Understanding npm
		Chapter : Writing you own module
			-	For utilizing a js file as module, specify the exports keyword for the corresponding variable or method 
			-	Than inside the other module utilize the require keyword for accessing it
			-	Example code 
				F1 : exports.mytext = "hello" 
				F2 : 
					var mymodule = require('./F1')
					console.log(mymodule.mytext)
			-	You share the module by creating the object using export
					
		Chapter : Managing third party packages
			-	Installed lodash library and accessed it, its kind of a math tool I suppose
			-	if you use -g inside the installation to access it globally
			-	Nodemon was used as the example no idea what it does as of now 
			
		Chapter : What is the package.json file
			-	npm init when used will install package.json
			- npm init --yes utilies the default package.json
			
	Module : Reading and writing files
		Chapter : Reading for files
			-	Heavy IO usually occurs in network and disk access
			-	file system can be manipulated by requiring fs as module
			-	the read operations specified inside the fs module usually have the second / third argument as the call back
			-	This callback is executed asynchronously and may can be anonympu or regular function
			-	However if a regular function is used as reference do not suffix Circular braces
			-	There are is option of utilizing the file format if used as the second optional parameter
			-	The second argument for json is the 'utf' standard
			-	JSON object can be considere as modules itself and thus can be used by requiring to variable directly
			-	var data = require('./data.json')
			-	JSON file if accessed using fs will access it as a string and thus you will need to cast that using JSON.parse()
			
		Chapter : Accessing directiories
			-	fs.readdir is used to read directories
		
		Chapter : Writing files
			-	For fs.writeFile the structure follows file name, data, and a callbacke however still hazy about that
		
	Module : Exploring Web Frameworks
		Chapter : NodeJS Framework
			-	webapi is a service that allows you to get and save data to a server or back end
			-	KOA, Express and sails are popular node framework
		Chapter : Express Framework
			-	A tried and tested framework
			-	Used to create web api
		Chapter : Socket.io
			-	Socket io is used for bidirectinal comminication between frontend and backend
			-	Realtime, bidirectional, even based communication
			-	It is event driven
	
	Module : Building your demo application
		Chapter : Static serving with express
			-	Express can also be used to host pages wonder how the link to react is made
			-	app.use can render the directory in which the index.html is available
		Chapter : Create your browser app
			-	
		5. Chapter : Create a post message service
			-	body parser is required to understand messages sent as json inside express
			-	app.use should be placed before the app.get or post as it creates issues
		6. Chapter : Connect to Socket.io from browser app
			-	For setting up socket we first require the http module and than pass it inside the require of socket.io as reference
			-	For including the sockets and http both we need to make the server variable listen to http instead of app
			-	the js on server is connected to the pertaining tag by the use of script tag
			-	Well the socket is imported from servel by referencing src to the server and than a function called io() is called
			-	This much is enough to notify the server that a connection is made
			-	Server can than verify using on() method inside itself to assure connection and take necessary action
		7. Chapter : Create your socket.io event
			-	It seems the syntax for socket is same on server as well as client just the name convention are used to differentiate them
			-	Further the function call .on takes in first argument as the event name and the second argument as the reference to call back function in which the value is to be passed
			
	6. Module : Exploring Database
		1. Chapter : Types of data frameworks
			-	Mongo is good for a quick start database, however skills for designing sql database should be honed
		2. Chapter : Set up mongo db
			-	Mlab is decommisoned since 2019 however there is a work around if you are using heroku app it still has an option of accesing it using heroku
		3. Chapter : Mongoose
			-	you will have to install mongosse inside the node server and use mongoose.connect before the server starts listening
			-	It must be noted that without the central arguments they may raise the warnings while creating notes it got resolved by 
				using {useNewUrlParser: true,  useUnifiedTopology: true } use similar context for future
		4. Chapter : Saving data to MongoDb
			-	The process of connecting to database is as follows, you wil need have to first create moongose model object and porvide it with the schema which matches the request body
			-	Than you will need to utilize the .save method which takes in a callback function,
			-	The emmit right away sends the data rather than a flag to so which may be problamatic but anways
			-	SO your mongo db will finally start getting the messages posted inside it than
			-	Inside the get request you will have to utilize the Message object creted earlier to fetch all the message
			-	Its worth noting that inside post a new instance of MEssage is required to be create while inside the get you will have to fetch the data by making a request to the Class itself.
			
		